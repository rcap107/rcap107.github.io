---
title: "Becoming a power user - Episode 2: zee my shell"
format: html
date: 2025-09-10
draft: true
tags: ["linux", "zsh", "tmux", "vim", "vscode"]
---
In this second instalment of the "Becoming a power user" series, I will be covering 
the switch from being just a casual terminal (specifically, bash) user, to being
a slightly less casual user of zsh, oh-my-zsh, and the plugins that come with both. 

## Setting the stage: my history with the command line
I have been working with the Linux command line for quite a few years at this point,
starting during my bachelor's mostly out of curiosity and to feel like I was a 
haxor.

{{< video "/static/haxor.mp4" title="hackerman me during my bachelor's" >}}
> Pictured: hackerman me during my bachelor's, or what I thought I'd become by 
> using Linux. 

Overall, I've always preferred Linux as an operating system to Windows: the syntax
felt "sane", and I've always had less issues getting environments to work on Linux
than on Windows. For years, all I've used Windows for has been playing videogames. 

This does not mean, however, that I used the command line beyond the incidental
`cp`, or `ls`. When I was feeling brave, I'd update my packages with `sudo apt-get update`. 

The situation remained mostly the same over the years, even through an EURECOM year
where the Linux command line was a major foe to slain for a few exams. 

I started getting in the weeds a bit more during my PhD, when I had to set up my 
laptop to run code remotely. Some shenanigans ensued, but still not a lot of interest
on my part to "get better" at it. 

In the end, it took starting a postdoc at Inria for me to _finally_ deal with 
Linux in any meaningful way. I spent most of my time developing on the computing
cluster, accessing it remotely through SSH. This also involved managing my home
folder, a lot of `du`, and juggling environments between the (slow) shared disk
and the (fast, but small) home folder. 

All that's behind me, however. All that's left is a tmux set up script that did 
end up being useful for my current setup. That's for the next post, however.

In this, besides reminiscing once again on what has been, I am going to discuss
how I switched from bash to zsh, and why you might want to do that. 

## Why zsh? 
To be completely honest, I am not sure. I was somewhat curios to try out a different
shell, and I probably spotted some post on LinkedIn that inspired me to try an
alternative. 

I must admit that "plain zsh" does not feel much different from bash, though I 
can't really say I spent much time with it, given that installing  
[oh my zsh](https://ohmyz.sh) happened about at the same time as I started using 
the shell for real. 

## Why Oh my zsh? 
First off, _what is Oh my zsh?_

Shamelessly pasting from the GitHub [repo](https://github.com/ohmyzsh/ohmyzsh/?tab=readme-ov-file): 
> Oh My Zsh is an open source, community-driven framework for managing your zsh configuration.
> Sounds boring. Let's try again.
> Oh My Zsh will not make you a 10x developer...but you may feel like one.
> Once installed, your terminal shell will become the talk of the town or your money back! With each keystroke in your command prompt, you'll take advantage of the hundreds of powerful plugins and beautiful themes. Strangers will come up to you in caf√©s and ask you, "that is amazing! are you some sort of genius?"

Yeah, I really wanted to live that hackerman fantasy from my bachelor's. 

Seriously though, the plugins and themes are worth a look, and if you read this 
far, you might be the kind of person who would be interested in this anyway. 

I'll let you check the
[installation instructions](https://github.com/ohmyzsh/ohmyzsh/?tab=readme-ov-file#basic-installation)
in the repository. Whatever the command you use, the result of the installation
will be a new `.zshrc` configuration file that includes a lot of goodies prepared
by the zsh community (your old `.zshrc` will be saved in a `.zsh.pre-oh-my-zsh` 
file, so if you already have some custom commands, they won't get lost).

Then, it's time to edit the `.zshrc` file, which can be done using `vim .zshrc` 
(of course now I'm using Vim, what do you think after the [previous episode](posts/linux-tools-part1.qmd)?)

## My .zshrc config
First off, my theme. I am using `powerlevel10k` as theme ([repo](https://github.com/romkatv/powerlevel10k)). 
Installing the theme will prompt a wizard that lets you customize various options, 
like having the prompt on a new line, rather than on the same line as the cwd.
I quite like this setting, because it gives me a full row of width even when the
folder path is very long. 

Additionally, the theme tells me which python environment I'm in and the status of 
the git repo in the folder, including the current folder: as you can imagine,
that's particularly useful when I'm working on some kind of repo.

On the note of tracking files with VCS, one setting that I changed from the default
was this:
```sh
DISABLE_UNTRACKED_FILES_DIRTY="true"
```
Doing this ignores tracking dirty files, which was helpful for some repositories.

## zsh plugins
These are the plugins I am using, some more, some less:
```sh
plugins=(git virtualenv colored-man-pages python zsh-navigation-tools zsh-syntax-highlighting zsh-autosuggestions)
```

## Aliases, so many aliases
```sh
alias cds="cd ~/Projects/work/skrub"
alias cdp="cd ~/Projects/"
alias xo="open"
alias blog="~/Blog/rcap107.github.io"
```

## `act`, a baby's first function
```sh
# shell function to activate the specific python env
act() {
# source ~/venvs/"$1"/bin/activate  # commented out by conda initialize
}

_act_complete() {
    reply=($(ls -1 ~/venvs))
}
compctl -K _act_complete act
```
